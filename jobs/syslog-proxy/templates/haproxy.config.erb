<%
  syslog_forwarder_host = nil
  if_link("syslog_forwarder") { |syslog_forwarder_link| syslog_forwarder_host = syslog_forwarder_link.instances.first.address }
  unless syslog_forwarder_host
    syslog_forwarder_host = p("haproxy.syslog_server")
  end

  ingestor_hosts = nil
  if_link("ingestor") { |ingestor_link| ingestor_hosts = ingestor_link.instances.map { |instance| instance.address } }
  unless ingestor_hosts
    ingestor_hosts = p("haproxy.ingestor.backend_servers")
  end

  relp_port = nil
  if_link("ingestor") { |ingestor_link| relp_port = ingestor_link.p("logstash_ingestor.relp.port") }
  unless relp_port
    relp_port = p("haproxy.ingestor.relp.backend_port")
  end

  syslog_port = nil
  if_link("ingestor") { |ingestor_link| syslog_port = ingestor_link.p("logstash_ingestor.syslog.port") }
  unless syslog_port
    syslog_port = p("haproxy.ingestor.syslog.backend_port")
  end

  syslog_tls_port = nil
  if_p('haproxy.ingestor.tls.backend_port') do |prop|
    syslog_tls_port = prop
  end.else do
    syslog_tls_port = link('ingestor').p('logstash_ingestor.syslog_tls.port')
  end

%>
global
    log <%= syslog_forwarder_host %> syslog <%= p('haproxy.log_level') %>
    log-tag ls-router
    daemon
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param 2048
    <% if p("haproxy.enable_stats_socket") %>
    stats socket /var/vcap/sys/run/haproxy/stats
    <% end %>

defaults
    log global
    maxconn 64000
    option contstats
    option tcplog
    timeout connect         <%= p("haproxy.connect_timeout") %>s
    timeout client          <%= p("haproxy.client_timeout") %>s
    timeout server          <%= p("haproxy.server_timeout") %>s
    timeout queue           <%= p("haproxy.queue_timeout") %>s

frontend syslog-in
    mode tcp

    <% if properties.haproxy.ssl_pem and properties.haproxy.ingestor.enable_ssl == true %>
    bind :<%= p("haproxy.ingestor.syslog.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.ingestor.syslog.inbound_port") %>
    <% end %>

    default_backend ingestors-syslog

backend ingestors-syslog
    mode tcp
    balance roundrobin
    <% ingestor_hosts.each_with_index do |ip, index| %>
    server ingestor<%= index %> <%= ip %>:<%= syslog_port %> check inter 1000
    <% end %>

<% if syslog_tls_port %>
frontend syslog-tls-in
    mode tcp
    <% if properties.haproxy.ssl_pem and properties.haproxy.ingestor.enable_ssl == true %>
    bind :<%= p("haproxy.ingestor.tls.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.ingestor.tls.inbound_port") %>
    <% end %>
    default_backend ingestors-syslog-tls

backend ingestors-syslog-tls
    mode tcp
    balance roundrobin
    <% ingestor_hosts.each_with_index do |ip, index| %>
    server ingestor<%= index %> <%= ip %>:<%= syslog_tls_port %> check inter 1000
    <% end %>
<% end %>

frontend relp-in
    mode tcp

    <% if properties.haproxy.ssl_pem and properties.haproxy.ingestor.enable_ssl == true %>
    bind :<%= p("haproxy.ingestor.relp.inbound_port") %> ssl crt /var/vcap/jobs/haproxy/config/cert.pem no-sslv3
    <% else %>
    bind :<%= p("haproxy.ingestor.relp.inbound_port") %>
    <% end %>

    default_backend ingestors-relp

backend ingestors-relp
    mode tcp
    balance roundrobin
    <% ingestor_hosts.each_with_index do |ip, index| %>
    server ingestor<%= index %> <%= ip %>:<%= relp_port %> check inter 1000
    <% end %>
